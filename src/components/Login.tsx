// ... existing code ...
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import Header from './Header'; // Header kh√¥ng c·∫ßn thi·∫øt ·ªü ƒë√¢y n·ªØa n·∫øu Login l√† 1 page ri√™ng
import Footer from './Footer';
import { useAuth } from '../contexts/AuthContext'; // <<<<<< IMPORT M·ªöI

// Gi·∫£ s·ª≠ b·∫°n c√≥ m·ªôt component Modal, v√≠ d·ª•:
// import Modal from './Modal'; // Ho·∫∑c t·ª´ m·ªôt th∆∞ vi·ªán

const Login: React.FC = () => {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const navigate = useNavigate();
    const { login } = useAuth(); // <<<<<< S·ª¨ D·ª§NG HOOK
    const [error, setError] = useState<string | null>(null); // State cho th√¥ng b√°o l·ªói
    const [showSuccessPopup, setShowSuccessPopup] = useState(false);


    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        setError(null); // Reset l·ªói tr∆∞·ªõc m·ªói l·∫ßn submit
        try {
            const response = await fetch('http://localhost:5000/api/auth/login', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ email, password }),
            });
            const data = await response.json();
            if (response.ok) {
                // Gi·∫£ s·ª≠ API tr·∫£ v·ªÅ user object v√† token
                const userData = {
                    id: data.user.id, // Ho·∫∑c data.id t√πy theo API
                    email: data.user.email, // Ho·∫∑c data.email
                    name: data.user.name, // T√™n ng∆∞·ªùi d√πng n·∫øu c√≥
                };
                // const token = data.token;

                login(userData /*, token */); // <<<<<< G·ªåI H√ÄM LOGIN T·ª™ CONTEXT

                // Hi·ªÉn th·ªã popup th√†nh c√¥ng
                setShowSuccessPopup(true);
                // T·ª± ƒë·ªông ƒë√≥ng popup v√† chuy·ªÉn h∆∞·ªõng sau v√†i gi√¢y
                setTimeout(() => {
                    setShowSuccessPopup(false);
                    navigate('/'); // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang ch·ªß ho·∫∑c dashboard
                }, 2000); // 2 gi√¢y

            } else {
                setError(data.message || 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i! Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin.');
            }
        } catch (err) {
            console.error('L·ªói ƒëƒÉng nh·∫≠p:', err);
            setError('L·ªói k·∫øt n·ªëi ƒë·∫øn server! Vui l√≤ng th·ª≠ l·∫°i sau.');
        }
    };

    return (
        // B·ªë c·ª•c bao g·ªìm c·∫£ Header v√† Footer n·∫øu Login l√† m·ªôt trang ƒë·∫ßy ƒë·ªß
        <div className="flex flex-col min-h-screen bg-gradient-to-br from-[#18122B] via-[#2D1B4A] to-[#3E206D] text-white font-sans relative overflow-hidden">
            {/* <Header /> */} {/* N·∫øu Header ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ·ªü App.tsx ho·∫∑c layout chung th√¨ kh√¥ng c·∫ßn ·ªü ƒë√¢y */}

            {/* Hi·ªáu ·ª©ng n·ªÅn (n·∫øu c·∫ßn cho trang login ri√™ng) */}
            <div className="absolute inset-0 pointer-events-none z-0">
                <img
                    src="/src/assets/bg/Home.png" // ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n
                    alt="Mystical background"
                    className="w-full h-full object-cover opacity-20"
                />
                <div className="absolute inset-0 bg-gradient-to-b from-transparent to-[#18122B] opacity-70"></div>
            </div>

            <main className="flex-grow relative z-10 flex flex-col items-center justify-center px-4 py-10"> {/* flex-grow ƒë·ªÉ main chi·∫øm kh√¥ng gian */}
                <div className="bg-[#2D1B4A]/80 rounded-2xl shadow-2xl p-8 sm:p-10 max-w-md w-full border border-purple-500 backdrop-blur-md">
                    <h2 className="text-3xl font-bold mb-8 text-center text-purple-300 drop-shadow-lg font-['Cinzel',_serif]">
                        ƒêƒÉng Nh·∫≠p
                    </h2>
                    <form onSubmit={handleSubmit} className="space-y-6">
                        <div>
                            <label htmlFor="email-login" className="block text-sm font-medium text-purple-200 mb-1">
                                Email
                            </label>
                            <input
                                id="email-login"
                                type="email"
                                placeholder="emailcuaban@example.com"
                                value={email}
                                onChange={e => setEmail(e.target.value)}
                                required
                                className="w-full px-4 py-3 rounded-lg bg-slate-800/70 border border-purple-600 focus:ring-2 focus:ring-pink-500 focus:border-pink-500 outline-none text-white placeholder-gray-500 transition-all"
                            />
                        </div>
                        <div>
                            <label htmlFor="password-login" className="block text-sm font-medium text-purple-200 mb-1">
                                M·∫≠t kh·∫©u
                            </label>
                            <input
                                id="password-login"
                                type="password"
                                placeholder="Nh·∫≠p m·∫≠t kh·∫©u c·ªßa b·∫°n"
                                value={password}
                                onChange={e => setPassword(e.target.value)}
                                required
                                className="w-full px-4 py-3 rounded-lg bg-slate-800/70 border border-purple-600 focus:ring-2 focus:ring-pink-500 focus:border-pink-500 outline-none text-white placeholder-gray-500 transition-all"
                            />
                        </div>
                        {error && <p className="text-sm text-red-400 text-center">{error}</p>}
                        <button
                            type="submit"
                            className="w-full px-6 py-3 rounded-lg font-semibold text-white bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 shadow-md hover:shadow-lg transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-pink-500 focus:ring-opacity-50"
                        >
                            ƒêƒÉng nh·∫≠p
                        </button>
                    </form>
                    <p className="mt-8 text-center text-sm text-gray-400">
                        Ch∆∞a c√≥ t√†i kho·∫£n?{' '}
                        <Link to="/register" className="font-medium text-purple-400 hover:text-pink-500 hover:underline transition-colors duration-300">
                            ƒêƒÉng k√Ω ngay
                        </Link>
                    </p>
                </div>
            </main>

            {/* Popup ƒëƒÉng nh·∫≠p th√†nh c√¥ng */}
            {showSuccessPopup && (
                <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-4">
                    <div className="bg-gradient-to-br from-purple-600 to-pink-700 p-8 rounded-xl shadow-2xl text-center max-w-sm mx-auto border border-purple-400">
                        <div className="text-5xl mb-4">üéâ</div>
                        <h3 className="text-2xl font-bold text-white mb-3 font-['Cinzel',_serif]">ƒêƒÉng Nh·∫≠p Th√†nh C√¥ng!</h3>
                        <p className="text-purple-200 mb-6">Ch√†o m·ª´ng b·∫°n tr·ªü l·∫°i Tarot Horizon. B·∫°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn h∆∞·ªõng...</p>
                        {/* N√∫t ƒë√≥ng c√≥ th·ªÉ kh√¥ng c·∫ßn thi·∫øt n·∫øu t·ª± ƒë·ªông ƒë√≥ng */}
                        {/* <button 
                            onClick={() => {
                                setShowSuccessPopup(false);
                                navigate('/');
                            }}
                            className="px-6 py-2 bg-pink-500 hover:bg-pink-600 text-white rounded-lg font-semibold transition-colors"
                        >
                            OK
                        </button> */}
                    </div>
                </div>
            )}

            {/* <Footer /> */} {/* T∆∞∆°ng t·ª± Header, n·∫øu ƒë√£ c√≥ ·ªü layout chung */}
        </div>
    );
};

export default Login;

// ... existing code ...